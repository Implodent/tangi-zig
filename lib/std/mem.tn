const Allocator = trait {
    pub const Error = enum {
        OutOfMemory
    };

    fn allocate(&self, layout: Layout) Error!*u8;
    fn free(&self, ptr: *u8, layout: Layout);
    fn alloc(&self, comptime infer T: type, size: usize) Error!*T {
        @ptrCast(try allocate(.{ .size = @sizeOf(T) * size, .align = @alignOf(T) }))
    }
    fn create(&self, comptime infer T: type) Error!*T {
        try alloc(T, 1)
    }
};

const Layout = struct {
    size: usize,
    align: usize
};
